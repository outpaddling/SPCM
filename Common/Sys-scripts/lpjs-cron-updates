#!/bin/sh -e

##########################################################################
#   Script description:
#
#       Launch compute node updats from cron.  This script will
#       run lpjs-update-idle-nodes, which will drain all nodes
#       and then update all nodes in the "drained" state.  Busy
#       nodes will be skipped, so you need to run lpjs-update-idle-nodes
#       repeatedly to update nodes as they become available.
#
#       Add this script to the root crontab as follows:
#
#       0-59/5 * * * * $(auto-localbase)/sbin/lpjs-cron-updates
#
#       lpjs-update-idle-nodes will gracefully exit if another
#       instance is running, so feel free to schedule frequently in
#       order to minimize idle time of nodes that require updating.
#
#   Arguments:
#       None
#       
#   History:
#   Date        Name        Modification
#   2018-12-07  root        Begin
##########################################################################

usage()
{
    printf "Usage: $0\n"
    exit 1
}


##########################################################################
#   Main
##########################################################################

if [ $# != 0 ]; then
    usage
fi

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/pkg/bin:/usr/pkg/sbin:/usr/local/bin:/usr/local/sbin
export PATH

log_dir="/usr/local/var/log/lpjs"
mkdir -p $log_dir
cron_log=$log_dir/lpjs-cron-updates
updates_log=$log_dir/lpjs-update-idle-nodes
readonly lock_file="$log_dir/lockfile"
printf '\n' >> $cron_log
date >> $cron_log
printf '\n' >> $cron_log

if [ -e "$lock_file" ]; then
    printf "Another instance of $0 is currently running.\n" >> $cron_log
    printf "Remove $lock_file to override.\n" >> $cron_log
    exit
fi
printf "Running lpjs-update-idle-nodes...\n" >> $cron_log
lpjs-update-idle-nodes >> $updates_log

# Trim log
tail -50000 $updates_log > $updates_log.tmp
mv -f $updates_log.tmp $updates_log
